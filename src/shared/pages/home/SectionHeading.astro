---
interface Props {
	title?: string;
	copy?: string;
}

const { title, copy } = Astro.props;
---

<script>
	function setupAnimations() {
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						const animateAttr = entry.target.getAttribute('data-animate');
						if (animateAttr) {
							entry.target.classList.add(...animateAttr.split(' '));
						}
						observer.unobserve(entry.target);
					}
				});
			},
			{
				rootMargin: '0px',
				threshold: 0,
			},
		);

		document.querySelectorAll('[data-animate]').forEach((element) => {
			observer.observe(element);
		});
	}

	setupAnimations();
</script>

<div class="flex flex-col items-center gap-4 py-4">
	{
		title && (
			<h2
				class="text-center text-4xl font-bold text-zinc-800 opacity-0 duration-500 ease-in xl:text-5xl dark:text-zinc-50"
				data-animate="opacity-100"
			>
				{title}
			</h2>
		)
	}
	{
		copy && (
			<p
				class="mx-auto max-w-[400px] border-t border-zinc-200 pt-4 text-center text-sm text-zinc-600 opacity-0 transition-opacity duration-500 ease-in md:text-base xl:max-w-[500px] xl:text-lg dark:border-zinc-400 dark:text-zinc-100"
				data-animate="opacity-100"
			>
				{copy}
			</p>
		)
	}
</div>
