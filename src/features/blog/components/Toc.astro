---
import type { MarkdownHeading } from 'astro';
import { cva } from 'class-variance-authority';
import ActionItem from '@shared/components/base/ActionItem.astro';

interface Props {
	headings: MarkdownHeading[];
}

const headingVariants = cva(
	'font-medium text-sm data-[toc-active=true]:text-accent-dark dark:data-[toc-active=true]:text-accent-brightest',
	{
		variants: {
			level: {
				1: 'text-zinc-800 dark:text-zinc-300 hover:text-zinc-900 dark:hover:text-zinc-200',
				2: 'text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-300',
				3: 'pl-6 text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-300',
				4: 'pl-12 text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-300',
			},
		},
		defaultVariants: {
			level: 1,
		},
	},
);

const { headings } = Astro.props;
---

<script>
	const headings = document.querySelectorAll(
		'#post-content h2, #post-content h3, #post-content h4, #post-content h5',
	);

	let prevActiveSectionId: string | null = null;

	function getTocLink(id: string | null) {
		return id ? document.querySelector(`#toc a[href="#${id}"]`) : null;
	}

	function setTocLinkAttribute({
		link,
		attribute,
		active,
	}: {
		link: Element;
		attribute: string;
		active: boolean;
	}) {
		link.setAttribute(attribute, active ? 'true' : 'false');
	}

	function addIntersectionObserver() {
		const observer = new IntersectionObserver((headings) => {
			headings.forEach((heading) => {
				const id = heading.target.getAttribute('id');
				const link = getTocLink(id);

				if (!link) {
					return;
				}
				if (heading.intersectionRatio > 0) {
					setTocLinkAttribute({ link, attribute: 'data-toc-visible', active: true });
					prevActiveSectionId = heading.target.id;
				} else {
					setTocLinkAttribute({ link, attribute: 'data-toc-visible', active: false });
				}

				const firstVisibleLink = document.querySelector('#toc a[data-toc-visible="true"]');
				const linkElements = document.querySelectorAll('#toc a');

				linkElements.forEach((link) => {
					setTocLinkAttribute({ link, attribute: 'data-toc-active', active: false });
				});

				if (firstVisibleLink) {
					setTocLinkAttribute({
						link: firstVisibleLink,
						attribute: 'data-toc-active',
						active: true,
					});
				} else if (prevActiveSectionId) {
					const link = getTocLink(prevActiveSectionId);
					if (link) {
						setTocLinkAttribute({ link, attribute: 'data-toc-active', active: true });
					}
				}
			});
		});

		headings.forEach((heading) => {
			observer.observe(heading);
		});
	}

	addIntersectionObserver();
</script>

<div
	id="toc"
	class="sticky top-24 hidden max-h-[calc(100vh-4rem)] max-w-[320px] flex-col gap-2 overflow-y-auto py-2 pr-4 pl-2 xl:flex"
>
	<h2 class="text-lg font-semibold">Table of contents</h2>
	{
		headings.map((heading) => (
			<ActionItem
				href={`#${heading.slug}`}
				as="a"
				id={heading.slug}
				data-active="false"
				class={headingVariants({ level: heading.depth as 1 | 2 | 3 | 4 })}
			>
				{heading.text}
			</ActionItem>
		))
	}
</div>
