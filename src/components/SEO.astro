---
// import { ClientRouter } from "astro:transitions";
import '../styles/main.css';
import { DOMAIN_NAME } from '@consts/urls';

interface Props {
	title?: string;
	description?: string;
	url?: string;
}

const DEFAULT_TITLE = 'Kieran Roberts - Software Developer';
const DEFAULT_DESCRIPTION =
	"Hi, I'm a React & TypeScript web builder with multiple years worth of industry experience. Let's talk";
const DEFAULT_URL = DOMAIN_NAME;

const { title = DEFAULT_TITLE, description = DEFAULT_DESCRIPTION, url = DEFAULT_URL } = Astro.props;

const isProd = import.meta.env.PROD;
---

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
	<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
	<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
	<link rel="apple-touch-icon" href="/apple-touch-icon.png" />
	<meta name="generator" content={Astro.generator} />
	<meta name="theme-color" content="#ffffff" />
	<meta name="msapplication-TileColor" content="#ffffff" />

	<meta name="description" content={description} />

	<!-- Facebook Meta Tags -->
	<meta property="og:title" content={title} />
	<meta property="og:image" content="/og-image.png" />
	<meta property="og:url" content={url} />
	<meta property="og:site_name" content="kieranroberts.dev" />
	<meta property="og:description" content={description} />
	<meta property="og:type" content="website" />

	<!-- Twitter Meta Tags -->
	<meta name="twitter:card" content="summary_large_image" />
	<meta property="twitter:title" content={title} />
	<meta property="twitter:description" content={description} />
	<meta property="twitter:creator" content="Kieran6dev" />
	<meta property="twitter:domain" content="kieranroberts.dev" />
	<meta property="twitter:url" content={url} />
	<meta name="twitter:image" content="/og-image.png" />

	<link rel="sitemap" href="/sitemap-index.xml" />

	<title>{title}</title>

	{/* Page transition animations */}
	<!-- <ClientRouter transition:animate="slide" /> -->

	{/* Fonts */}
	<link rel="preload" href="/fonts/Lato/Lato-Regular.ttf" as="font" type="font/ttf" crossorigin />
	<link rel="preload" href="/fonts/Lato/Lato-Bold.ttf" as="font" type="font/ttf" crossorigin />
	<link
		rel="preload"
		href="/fonts/Barlow/Barlow-SemiBold.ttf"
		as="font"
		type="font/ttf"
		crossorigin
	/>
	<link
		rel="preload"
		href="/fonts/Barlow/Barlow-Regular.ttf"
		as="font"
		type="font/ttf"
		crossorigin
	/>
	<link
		rel="preload"
		href="/fonts/Barlow/Barlow-Medium.ttf"
		as="font"
		type="font/ttf"
		crossorigin
	/>
	<link rel="preload" href="/fonts/Barlow/Barlow-Bold.ttf" as="font" type="font/ttf" crossorigin />

	<link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

	<script is:inline>
		// Necessary for view transitions
		// document.addEventListener('astro:after-swap', () => {
		// 	if (
		// 		localStorage.theme === 'dark' ||
		// 		(!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
		// 	) {
		// 		document.documentElement.className = '';
		// 		document.documentElement.classList.add('dark');
		// 		document.querySelector('#theme-toggle')?.setAttribute('aria-label', 'dark');
		// 	} else {
		// 	}
		// });
		if (
			localStorage.theme === 'dark' ||
			(!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
		) {
			document.documentElement.className = '';
			document.documentElement.classList.add('dark');
			document.querySelector('#theme-toggle')?.setAttribute('aria-label', 'dark');
		} else {
		}
	</script>
	{
		isProd ? (
			<script
				is:inline
				data-domain="kieranroberts.dev"
				data-api="/discover/anl/event"
				src="/discover/anl/script.js"
			/>
		) : null
	}
</head>
