---
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import { cva } from 'class-variance-authority';

import ActionItem from '@shared/components/base/ActionItem.astro';
import type { Project } from '@features/projects/types';
import Button from '@shared/components/base/Button.astro';
import { getImageUrl } from '@shared/utils/image';

export interface Props extends Project {}

const { title, description, githubLink, liveLink, caseStudyLink, image, status } = Astro.props;

const statusStyles = cva(
	['w-max rounded-full capitalize border border-zinc-200 px-3 py-px dark:border-zinc-800'],
	{
		variants: {
			status: {
				complete: ['bg-green-400', 'text-zinc-900'],
				'in progress': ['bg-yellow-300', 'text-zinc-900'],
				planned: ['bg-blue-400', 'text-zinc-900'],
				'MVP done': ['bg-teal-400', 'text-zinc-900'],
				'updates planned': ['bg-blue-400', 'text-zinc-900'],
			},
		},
	},
);
---

<article
	class="group relative z-10 flex w-full flex-col gap-4 rounded-xl border border-zinc-200 bg-white p-4 lg:max-w-[450px] dark:border-zinc-800 dark:bg-zinc-950"
>
	{
		liveLink ? (
			<ActionItem as="a" href={liveLink} target="_blank">
				<div class="mb-4 flex overflow-hidden rounded-lg border border-zinc-200 lg:max-h-[250px] dark:border-zinc-800">
					<Image
						src={getImageUrl(image)}
						alt={`${title} highlight`}
						width={700}
						height={500}
						class="rounded-lg bg-cover bg-center"
						loading="lazy"
						decoding="async"
						quality={100}
					/>
				</div>

				<h2 class="font-heading text-2xl font-semibold text-zinc-700 transition-colors duration-300 group-hover:text-zinc-900 dark:text-zinc-200 dark:group-hover:text-zinc-100">
					{title}
				</h2>
			</ActionItem>
		) : (
			<div>
				<div class="mb-4 flex overflow-hidden rounded-lg border border-zinc-200 lg:max-h-[250px] dark:border-zinc-800">
					<Image
						src={getImageUrl(image)}
						alt={`${title} highlight`}
						width={700}
						height={500}
						class="rounded-lg bg-cover bg-center"
						loading="lazy"
						decoding="async"
						quality={100}
					/>
				</div>

				<h2 class="font-heading text-2xl font-semibold text-zinc-700 transition-colors duration-300 group-hover:text-zinc-900 dark:text-zinc-200 dark:group-hover:text-zinc-100">
					{title}
				</h2>
			</div>
		)
	}
	<div class="flex flex-row gap-2">
		<Button size="sm" as="a" href={githubLink} target="_blank">
			Code
			<Icon name="github" width={16} height={16} class="" />
		</Button>
		{
			liveLink ? (
				<Button intent="secondary" size="sm" as="a" href={liveLink} target="_blank">
					Visit site
					<Icon name="arrow-right" width={14} height={14} class="stroke-current" />
				</Button>
			) : null
		}
		{
			caseStudyLink ? (
				<Button size="sm" as="a" href={caseStudyLink} target="_blank">
					Case study
				</Button>
			) : (
				<Button size="sm" as="button" disabled>
					{' '}
					Case study{' '}
				</Button>
			)
		}
	</div>
	<p
		class="text-zinc-600 transition-colors duration-300 group-hover:text-zinc-800 dark:text-zinc-300 dark:group-hover:text-zinc-200"
	>
		{description}
	</p>

	<div class="mt-auto flex flex-row gap-2">
		{status.map((status) => <div class={statusStyles({ status })}>{status}</div>)}
	</div>
</article>
